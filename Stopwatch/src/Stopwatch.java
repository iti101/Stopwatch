import java.awt.*;import java.awt.event.*;import javax.swing.*;public class Stopwatch implements ActionListener{    //the variable that contains the main graphic settings    JFrame frame = new JFrame();    JButton startButton = new JButton("START");    JButton resetButton = new JButton("RESET");    JLabel timeLabel = new JLabel();    //variables to contain    int elapsedTime = 0;    int seconds =0;    int minutes =0;    int hours =0;    boolean started = false;    String seconds_string = String.format("%02d", seconds);    String minutes_string = String.format("%02d", minutes);    String hours_string = String.format("%02d", hours);    Timer timer = new Timer(1000, new ActionListener() {        public void actionPerformed(ActionEvent e) {            elapsedTime=elapsedTime+1000;            hours = (elapsedTime/3600000);            minutes = (elapsedTime/60000) % 60;            seconds = (elapsedTime/1000) % 60;            seconds_string = String.format("%02d", seconds);            minutes_string = String.format("%02d", minutes);            hours_string = String.format("%02d", hours);            timeLabel.setText(hours_string+":"+minutes_string+":"+seconds_string);        }    });    Stopwatch(){        // Variables to contain the 'button' settings        frame.add(startButton);        frame.add(resetButton);        frame.add(timeLabel);        // Graphic settings for the frame of the application        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);        frame.setSize(420,420);        frame.setLayout(null);        frame.setVisible(true);        // Graphic settings for the 'Timer'        timeLabel.setText(hours_string+":"+minutes_string+":"+seconds_string);        timeLabel.setBounds(100,100,200,100);        timeLabel.setFont(new Font("Futura ",Font.PLAIN,35));        timeLabel.setBorder(BorderFactory.createBevelBorder(1));        timeLabel.setOpaque(true);        timeLabel.setHorizontalAlignment(JTextField.CENTER);        // Graphic settings for the 'Start button'        startButton.setBounds(100,200,100,50);        startButton.setFont(new Font("Gotham",Font.ITALIC,15));        startButton.setFocusable(false);        startButton.addActionListener(this);        // Graphic settings for the 'Reset button'        resetButton.setBounds(200,200,100,50);        resetButton.setFont(new Font("Gotham",Font.ITALIC,15));        resetButton.setFocusable(false);        resetButton.addActionListener(this);    }    @Override    public void actionPerformed(ActionEvent e) {        if(e.getSource()==startButton) {            if(!started) {                started=true;                startButton.setText("STOP");                start();            }            else {                started=false;                startButton.setText("START");                stop();            }        }        //changes the 'Start' button into the 'Reset' button, as soon as the timer starts running        if(e.getSource()==resetButton) {            started=false;            startButton.setText("START");            reset();        }    }    //calling start-function    void start() {        timer.start();    }    //calling stop-function    void stop() {        timer.stop();    }    //calling reset-function, and setting the timer back to zero (for it to start again)    void reset() {        timer.stop();        elapsedTime=0;        seconds =0;        minutes=0;        hours=0;        seconds_string = String.format("%02d", seconds);        minutes_string = String.format("%02d", minutes);        hours_string = String.format("%02d", hours);        timeLabel.setText(hours_string+":"+minutes_string+":"+seconds_string);    }}